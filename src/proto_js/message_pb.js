/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var EventHookPhase_pb = require('./EventHookPhase_pb.js');
goog.object.extend(proto, EventHookPhase_pb);
var Data_pb = require('./Data_pb.js');
goog.object.extend(proto, Data_pb);
goog.exportSymbol('proto.ULZProto.CastCmd', null, global);
goog.exportSymbol('proto.ULZProto.ECShortHand', null, global);
goog.exportSymbol('proto.ULZProto.GDADConfirmReq', null, global);
goog.exportSymbol('proto.ULZProto.GDADDiceResult', null, global);
goog.exportSymbol('proto.ULZProto.GDADResultResp', null, global);
goog.exportSymbol('proto.ULZProto.GDBroadcastResp', null, global);
goog.exportSymbol('proto.ULZProto.GDChangeConfirmReq', null, global);
goog.exportSymbol('proto.ULZProto.GDCreateReq', null, global);
goog.exportSymbol('proto.ULZProto.GDGetInfoReq', null, global);
goog.exportSymbol('proto.ULZProto.GDInstanceDT', null, global);
goog.exportSymbol('proto.ULZProto.GDMoveConfirmReq', null, global);
goog.exportSymbol('proto.ULZProto.GDMoveConfirmResp', null, global);
goog.exportSymbol('proto.ULZProto.GDPhaseConfirmReq', null, global);
goog.exportSymbol('proto.ULZProto.GDPhaseConfirmResp', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.ECShortHand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ULZProto.ECShortHand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.ECShortHand.displayName = 'proto.ULZProto.ECShortHand';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.ECShortHand.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.ECShortHand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.ECShortHand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.ECShortHand.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    position: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isinvert: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.ECShortHand}
 */
proto.ULZProto.ECShortHand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.ECShortHand;
  return proto.ULZProto.ECShortHand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.ECShortHand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.ECShortHand}
 */
proto.ULZProto.ECShortHand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCardId(value);
      break;
    case 2:
      var value = /** @type {!proto.ULZProto.EventCardPos} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsinvert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.ECShortHand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.ECShortHand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.ECShortHand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.ECShortHand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getIsinvert();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int32 card_id = 1;
 * @return {number}
 */
proto.ULZProto.ECShortHand.prototype.getCardId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ULZProto.ECShortHand.prototype.setCardId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EventCardPos position = 2;
 * @return {!proto.ULZProto.EventCardPos}
 */
proto.ULZProto.ECShortHand.prototype.getPosition = function() {
  return /** @type {!proto.ULZProto.EventCardPos} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ULZProto.EventCardPos} value */
proto.ULZProto.ECShortHand.prototype.setPosition = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool isInvert = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ULZProto.ECShortHand.prototype.getIsinvert = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.ULZProto.ECShortHand.prototype.setIsinvert = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.GDCreateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ULZProto.GDCreateReq.repeatedFields_, null);
};
goog.inherits(proto.ULZProto.GDCreateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.GDCreateReq.displayName = 'proto.ULZProto.GDCreateReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ULZProto.GDCreateReq.repeatedFields_ = [5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.GDCreateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.GDCreateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.GDCreateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDCreateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hostId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    duelerId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nvn: jspb.Message.getFieldWithDefault(msg, 4, 0),
    hostCardDeckList: jspb.Message.toObjectList(msg.getHostCardDeckList(),
    Data_pb.CharCardSet.toObject, includeInstance),
    duelCardDeckList: jspb.Message.toObjectList(msg.getDuelCardDeckList(),
    Data_pb.CharCardSet.toObject, includeInstance),
    hostExtraEcList: jspb.Message.toObjectList(msg.getHostExtraEcList(),
    Data_pb.EventCard.toObject, includeInstance),
    duelExtraEcList: jspb.Message.toObjectList(msg.getDuelExtraEcList(),
    Data_pb.EventCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.GDCreateReq}
 */
proto.ULZProto.GDCreateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.GDCreateReq;
  return proto.ULZProto.GDCreateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.GDCreateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.GDCreateReq}
 */
proto.ULZProto.GDCreateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuelerId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNvn(value);
      break;
    case 5:
      var value = new Data_pb.CharCardSet;
      reader.readMessage(value,Data_pb.CharCardSet.deserializeBinaryFromReader);
      msg.addHostCardDeck(value);
      break;
    case 6:
      var value = new Data_pb.CharCardSet;
      reader.readMessage(value,Data_pb.CharCardSet.deserializeBinaryFromReader);
      msg.addDuelCardDeck(value);
      break;
    case 7:
      var value = new Data_pb.EventCard;
      reader.readMessage(value,Data_pb.EventCard.deserializeBinaryFromReader);
      msg.addHostExtraEc(value);
      break;
    case 8:
      var value = new Data_pb.EventCard;
      reader.readMessage(value,Data_pb.EventCard.deserializeBinaryFromReader);
      msg.addDuelExtraEc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.GDCreateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.GDCreateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.GDCreateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDCreateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHostId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDuelerId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNvn();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHostCardDeckList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      Data_pb.CharCardSet.serializeBinaryToWriter
    );
  }
  f = message.getDuelCardDeckList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      Data_pb.CharCardSet.serializeBinaryToWriter
    );
  }
  f = message.getHostExtraEcList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      Data_pb.EventCard.serializeBinaryToWriter
    );
  }
  f = message.getDuelExtraEcList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      Data_pb.EventCard.serializeBinaryToWriter
    );
  }
};


/**
 * optional string room_key = 1;
 * @return {string}
 */
proto.ULZProto.GDCreateReq.prototype.getRoomKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ULZProto.GDCreateReq.prototype.setRoomKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string host_id = 2;
 * @return {string}
 */
proto.ULZProto.GDCreateReq.prototype.getHostId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ULZProto.GDCreateReq.prototype.setHostId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string dueler_id = 3;
 * @return {string}
 */
proto.ULZProto.GDCreateReq.prototype.getDuelerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ULZProto.GDCreateReq.prototype.setDuelerId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 nvn = 4;
 * @return {number}
 */
proto.ULZProto.GDCreateReq.prototype.getNvn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ULZProto.GDCreateReq.prototype.setNvn = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated CharCardSet host_card_deck = 5;
 * @return {!Array<!proto.ULZProto.CharCardSet>}
 */
proto.ULZProto.GDCreateReq.prototype.getHostCardDeckList = function() {
  return /** @type{!Array<!proto.ULZProto.CharCardSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.CharCardSet, 5));
};


/** @param {!Array<!proto.ULZProto.CharCardSet>} value */
proto.ULZProto.GDCreateReq.prototype.setHostCardDeckList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ULZProto.CharCardSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.CharCardSet}
 */
proto.ULZProto.GDCreateReq.prototype.addHostCardDeck = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ULZProto.CharCardSet, opt_index);
};


proto.ULZProto.GDCreateReq.prototype.clearHostCardDeckList = function() {
  this.setHostCardDeckList([]);
};


/**
 * repeated CharCardSet duel_card_deck = 6;
 * @return {!Array<!proto.ULZProto.CharCardSet>}
 */
proto.ULZProto.GDCreateReq.prototype.getDuelCardDeckList = function() {
  return /** @type{!Array<!proto.ULZProto.CharCardSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.CharCardSet, 6));
};


/** @param {!Array<!proto.ULZProto.CharCardSet>} value */
proto.ULZProto.GDCreateReq.prototype.setDuelCardDeckList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ULZProto.CharCardSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.CharCardSet}
 */
proto.ULZProto.GDCreateReq.prototype.addDuelCardDeck = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ULZProto.CharCardSet, opt_index);
};


proto.ULZProto.GDCreateReq.prototype.clearDuelCardDeckList = function() {
  this.setDuelCardDeckList([]);
};


/**
 * repeated EventCard host_extra_ec = 7;
 * @return {!Array<!proto.ULZProto.EventCard>}
 */
proto.ULZProto.GDCreateReq.prototype.getHostExtraEcList = function() {
  return /** @type{!Array<!proto.ULZProto.EventCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.EventCard, 7));
};


/** @param {!Array<!proto.ULZProto.EventCard>} value */
proto.ULZProto.GDCreateReq.prototype.setHostExtraEcList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ULZProto.EventCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.EventCard}
 */
proto.ULZProto.GDCreateReq.prototype.addHostExtraEc = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ULZProto.EventCard, opt_index);
};


proto.ULZProto.GDCreateReq.prototype.clearHostExtraEcList = function() {
  this.setHostExtraEcList([]);
};


/**
 * repeated EventCard duel_extra_ec = 8;
 * @return {!Array<!proto.ULZProto.EventCard>}
 */
proto.ULZProto.GDCreateReq.prototype.getDuelExtraEcList = function() {
  return /** @type{!Array<!proto.ULZProto.EventCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.EventCard, 8));
};


/** @param {!Array<!proto.ULZProto.EventCard>} value */
proto.ULZProto.GDCreateReq.prototype.setDuelExtraEcList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.ULZProto.EventCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.EventCard}
 */
proto.ULZProto.GDCreateReq.prototype.addDuelExtraEc = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.ULZProto.EventCard, opt_index);
};


proto.ULZProto.GDCreateReq.prototype.clearDuelExtraEcList = function() {
  this.setDuelExtraEcList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.GDGetInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ULZProto.GDGetInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.GDGetInfoReq.displayName = 'proto.ULZProto.GDGetInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.GDGetInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.GDGetInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.GDGetInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDGetInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    side: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentPhase: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isWatcher: jspb.Message.getFieldWithDefault(msg, 4, false),
    incomeUserId: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.GDGetInfoReq}
 */
proto.ULZProto.GDGetInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.GDGetInfoReq;
  return proto.ULZProto.GDGetInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.GDGetInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.GDGetInfoReq}
 */
proto.ULZProto.GDGetInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomKey(value);
      break;
    case 2:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 3:
      var value = /** @type {!proto.ULZProto.EventHookPhase} */ (reader.readEnum());
      msg.setCurrentPhase(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsWatcher(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIncomeUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.GDGetInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.GDGetInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.GDGetInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDGetInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCurrentPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIsWatcher();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIncomeUserId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string room_key = 1;
 * @return {string}
 */
proto.ULZProto.GDGetInfoReq.prototype.getRoomKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ULZProto.GDGetInfoReq.prototype.setRoomKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PlayerSide side = 2;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.GDGetInfoReq.prototype.getSide = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.GDGetInfoReq.prototype.setSide = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional EventHookPhase current_phase = 3;
 * @return {!proto.ULZProto.EventHookPhase}
 */
proto.ULZProto.GDGetInfoReq.prototype.getCurrentPhase = function() {
  return /** @type {!proto.ULZProto.EventHookPhase} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ULZProto.EventHookPhase} value */
proto.ULZProto.GDGetInfoReq.prototype.setCurrentPhase = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool is_watcher = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ULZProto.GDGetInfoReq.prototype.getIsWatcher = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.ULZProto.GDGetInfoReq.prototype.setIsWatcher = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string income_user_id = 5;
 * @return {string}
 */
proto.ULZProto.GDGetInfoReq.prototype.getIncomeUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ULZProto.GDGetInfoReq.prototype.setIncomeUserId = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.GDBroadcastResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ULZProto.GDBroadcastResp.repeatedFields_, null);
};
goog.inherits(proto.ULZProto.GDBroadcastResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.GDBroadcastResp.displayName = 'proto.ULZProto.GDBroadcastResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ULZProto.GDBroadcastResp.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.GDBroadcastResp.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.GDBroadcastResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.GDBroadcastResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDBroadcastResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    msg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    command: jspb.Message.getFieldWithDefault(msg, 3, 0),
    currentPhase: jspb.Message.getFieldWithDefault(msg, 4, 0),
    phaseHook: jspb.Message.getFieldWithDefault(msg, 5, 0),
    side: jspb.Message.getFieldWithDefault(msg, 6, 0),
    instanceSetList: jspb.Message.toObjectList(msg.getInstanceSetList(),
    proto.ULZProto.ECShortHand.toObject, includeInstance),
    effectTrigList: jspb.Message.toObjectList(msg.getEffectTrigList(),
    Data_pb.EffectResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.GDBroadcastResp}
 */
proto.ULZProto.GDBroadcastResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.GDBroadcastResp;
  return proto.ULZProto.GDBroadcastResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.GDBroadcastResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.GDBroadcastResp}
 */
proto.ULZProto.GDBroadcastResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {!proto.ULZProto.CastCmd} */ (reader.readEnum());
      msg.setCommand(value);
      break;
    case 4:
      var value = /** @type {!proto.ULZProto.EventHookPhase} */ (reader.readEnum());
      msg.setCurrentPhase(value);
      break;
    case 5:
      var value = /** @type {!proto.ULZProto.EventHookType} */ (reader.readEnum());
      msg.setPhaseHook(value);
      break;
    case 6:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 7:
      var value = new proto.ULZProto.ECShortHand;
      reader.readMessage(value,proto.ULZProto.ECShortHand.deserializeBinaryFromReader);
      msg.addInstanceSet(value);
      break;
    case 8:
      var value = new Data_pb.EffectResult;
      reader.readMessage(value,Data_pb.EffectResult.deserializeBinaryFromReader);
      msg.addEffectTrig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.GDBroadcastResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.GDBroadcastResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.GDBroadcastResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDBroadcastResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommand();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCurrentPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getPhaseHook();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getInstanceSetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.ULZProto.ECShortHand.serializeBinaryToWriter
    );
  }
  f = message.getEffectTrigList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      Data_pb.EffectResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string room_key = 1;
 * @return {string}
 */
proto.ULZProto.GDBroadcastResp.prototype.getRoomKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ULZProto.GDBroadcastResp.prototype.setRoomKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.ULZProto.GDBroadcastResp.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ULZProto.GDBroadcastResp.prototype.setMsg = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional CastCmd command = 3;
 * @return {!proto.ULZProto.CastCmd}
 */
proto.ULZProto.GDBroadcastResp.prototype.getCommand = function() {
  return /** @type {!proto.ULZProto.CastCmd} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ULZProto.CastCmd} value */
proto.ULZProto.GDBroadcastResp.prototype.setCommand = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional EventHookPhase current_phase = 4;
 * @return {!proto.ULZProto.EventHookPhase}
 */
proto.ULZProto.GDBroadcastResp.prototype.getCurrentPhase = function() {
  return /** @type {!proto.ULZProto.EventHookPhase} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.ULZProto.EventHookPhase} value */
proto.ULZProto.GDBroadcastResp.prototype.setCurrentPhase = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional EventHookType phase_hook = 5;
 * @return {!proto.ULZProto.EventHookType}
 */
proto.ULZProto.GDBroadcastResp.prototype.getPhaseHook = function() {
  return /** @type {!proto.ULZProto.EventHookType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.ULZProto.EventHookType} value */
proto.ULZProto.GDBroadcastResp.prototype.setPhaseHook = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional PlayerSide side = 6;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.GDBroadcastResp.prototype.getSide = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.GDBroadcastResp.prototype.setSide = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * repeated ECShortHand instance_set = 7;
 * @return {!Array<!proto.ULZProto.ECShortHand>}
 */
proto.ULZProto.GDBroadcastResp.prototype.getInstanceSetList = function() {
  return /** @type{!Array<!proto.ULZProto.ECShortHand>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ULZProto.ECShortHand, 7));
};


/** @param {!Array<!proto.ULZProto.ECShortHand>} value */
proto.ULZProto.GDBroadcastResp.prototype.setInstanceSetList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ULZProto.ECShortHand=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.ECShortHand}
 */
proto.ULZProto.GDBroadcastResp.prototype.addInstanceSet = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ULZProto.ECShortHand, opt_index);
};


proto.ULZProto.GDBroadcastResp.prototype.clearInstanceSetList = function() {
  this.setInstanceSetList([]);
};


/**
 * repeated EffectResult effect_trig = 8;
 * @return {!Array<!proto.ULZProto.EffectResult>}
 */
proto.ULZProto.GDBroadcastResp.prototype.getEffectTrigList = function() {
  return /** @type{!Array<!proto.ULZProto.EffectResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.EffectResult, 8));
};


/** @param {!Array<!proto.ULZProto.EffectResult>} value */
proto.ULZProto.GDBroadcastResp.prototype.setEffectTrigList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.ULZProto.EffectResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.EffectResult}
 */
proto.ULZProto.GDBroadcastResp.prototype.addEffectTrig = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.ULZProto.EffectResult, opt_index);
};


proto.ULZProto.GDBroadcastResp.prototype.clearEffectTrigList = function() {
  this.setEffectTrigList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.GDInstanceDT = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ULZProto.GDInstanceDT.repeatedFields_, null);
};
goog.inherits(proto.ULZProto.GDInstanceDT, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.GDInstanceDT.displayName = 'proto.ULZProto.GDInstanceDT';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ULZProto.GDInstanceDT.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.GDInstanceDT.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.GDInstanceDT.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.GDInstanceDT} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDInstanceDT.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    side: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentPhase: jspb.Message.getFieldWithDefault(msg, 3, 0),
    updateCardList: jspb.Message.toObjectList(msg.getUpdateCardList(),
    proto.ULZProto.ECShortHand.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.GDInstanceDT}
 */
proto.ULZProto.GDInstanceDT.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.GDInstanceDT;
  return proto.ULZProto.GDInstanceDT.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.GDInstanceDT} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.GDInstanceDT}
 */
proto.ULZProto.GDInstanceDT.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomKey(value);
      break;
    case 2:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 3:
      var value = /** @type {!proto.ULZProto.EventHookPhase} */ (reader.readEnum());
      msg.setCurrentPhase(value);
      break;
    case 4:
      var value = new proto.ULZProto.ECShortHand;
      reader.readMessage(value,proto.ULZProto.ECShortHand.deserializeBinaryFromReader);
      msg.addUpdateCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.GDInstanceDT.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.GDInstanceDT.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.GDInstanceDT} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDInstanceDT.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCurrentPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getUpdateCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ULZProto.ECShortHand.serializeBinaryToWriter
    );
  }
};


/**
 * optional string room_key = 1;
 * @return {string}
 */
proto.ULZProto.GDInstanceDT.prototype.getRoomKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ULZProto.GDInstanceDT.prototype.setRoomKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PlayerSide side = 2;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.GDInstanceDT.prototype.getSide = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.GDInstanceDT.prototype.setSide = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional EventHookPhase current_phase = 3;
 * @return {!proto.ULZProto.EventHookPhase}
 */
proto.ULZProto.GDInstanceDT.prototype.getCurrentPhase = function() {
  return /** @type {!proto.ULZProto.EventHookPhase} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ULZProto.EventHookPhase} value */
proto.ULZProto.GDInstanceDT.prototype.setCurrentPhase = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated ECShortHand update_card = 4;
 * @return {!Array<!proto.ULZProto.ECShortHand>}
 */
proto.ULZProto.GDInstanceDT.prototype.getUpdateCardList = function() {
  return /** @type{!Array<!proto.ULZProto.ECShortHand>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ULZProto.ECShortHand, 4));
};


/** @param {!Array<!proto.ULZProto.ECShortHand>} value */
proto.ULZProto.GDInstanceDT.prototype.setUpdateCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ULZProto.ECShortHand=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.ECShortHand}
 */
proto.ULZProto.GDInstanceDT.prototype.addUpdateCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ULZProto.ECShortHand, opt_index);
};


proto.ULZProto.GDInstanceDT.prototype.clearUpdateCardList = function() {
  this.setUpdateCardList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.GDMoveConfirmReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ULZProto.GDMoveConfirmReq.repeatedFields_, null);
};
goog.inherits(proto.ULZProto.GDMoveConfirmReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.GDMoveConfirmReq.displayName = 'proto.ULZProto.GDMoveConfirmReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ULZProto.GDMoveConfirmReq.repeatedFields_ = [3,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.GDMoveConfirmReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.GDMoveConfirmReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.GDMoveConfirmReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDMoveConfirmReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    side: jspb.Message.getFieldWithDefault(msg, 2, 0),
    updateCardList: jspb.Message.toObjectList(msg.getUpdateCardList(),
    Data_pb.EventCard.toObject, includeInstance),
    moveOpt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    point: jspb.Message.getFieldWithDefault(msg, 5, 0),
    triggerSklList: jspb.Message.toObjectList(msg.getTriggerSklList(),
    Data_pb.SkillSet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.GDMoveConfirmReq}
 */
proto.ULZProto.GDMoveConfirmReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.GDMoveConfirmReq;
  return proto.ULZProto.GDMoveConfirmReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.GDMoveConfirmReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.GDMoveConfirmReq}
 */
proto.ULZProto.GDMoveConfirmReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomKey(value);
      break;
    case 2:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 3:
      var value = new Data_pb.EventCard;
      reader.readMessage(value,Data_pb.EventCard.deserializeBinaryFromReader);
      msg.addUpdateCard(value);
      break;
    case 4:
      var value = /** @type {!proto.ULZProto.MovePhaseOpt} */ (reader.readEnum());
      msg.setMoveOpt(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPoint(value);
      break;
    case 6:
      var value = new Data_pb.SkillSet;
      reader.readMessage(value,Data_pb.SkillSet.deserializeBinaryFromReader);
      msg.addTriggerSkl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.GDMoveConfirmReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.GDMoveConfirmReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.GDMoveConfirmReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDMoveConfirmReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getUpdateCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      Data_pb.EventCard.serializeBinaryToWriter
    );
  }
  f = message.getMoveOpt();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getPoint();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTriggerSklList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      Data_pb.SkillSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional string room_key = 1;
 * @return {string}
 */
proto.ULZProto.GDMoveConfirmReq.prototype.getRoomKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ULZProto.GDMoveConfirmReq.prototype.setRoomKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PlayerSide side = 2;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.GDMoveConfirmReq.prototype.getSide = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.GDMoveConfirmReq.prototype.setSide = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated EventCard update_card = 3;
 * @return {!Array<!proto.ULZProto.EventCard>}
 */
proto.ULZProto.GDMoveConfirmReq.prototype.getUpdateCardList = function() {
  return /** @type{!Array<!proto.ULZProto.EventCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.EventCard, 3));
};


/** @param {!Array<!proto.ULZProto.EventCard>} value */
proto.ULZProto.GDMoveConfirmReq.prototype.setUpdateCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ULZProto.EventCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.EventCard}
 */
proto.ULZProto.GDMoveConfirmReq.prototype.addUpdateCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ULZProto.EventCard, opt_index);
};


proto.ULZProto.GDMoveConfirmReq.prototype.clearUpdateCardList = function() {
  this.setUpdateCardList([]);
};


/**
 * optional MovePhaseOpt move_opt = 4;
 * @return {!proto.ULZProto.MovePhaseOpt}
 */
proto.ULZProto.GDMoveConfirmReq.prototype.getMoveOpt = function() {
  return /** @type {!proto.ULZProto.MovePhaseOpt} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.ULZProto.MovePhaseOpt} value */
proto.ULZProto.GDMoveConfirmReq.prototype.setMoveOpt = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 point = 5;
 * @return {number}
 */
proto.ULZProto.GDMoveConfirmReq.prototype.getPoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ULZProto.GDMoveConfirmReq.prototype.setPoint = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated SkillSet trigger_skl = 6;
 * @return {!Array<!proto.ULZProto.SkillSet>}
 */
proto.ULZProto.GDMoveConfirmReq.prototype.getTriggerSklList = function() {
  return /** @type{!Array<!proto.ULZProto.SkillSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.SkillSet, 6));
};


/** @param {!Array<!proto.ULZProto.SkillSet>} value */
proto.ULZProto.GDMoveConfirmReq.prototype.setTriggerSklList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ULZProto.SkillSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.SkillSet}
 */
proto.ULZProto.GDMoveConfirmReq.prototype.addTriggerSkl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ULZProto.SkillSet, opt_index);
};


proto.ULZProto.GDMoveConfirmReq.prototype.clearTriggerSklList = function() {
  this.setTriggerSklList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.GDMoveConfirmResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ULZProto.GDMoveConfirmResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.GDMoveConfirmResp.displayName = 'proto.ULZProto.GDMoveConfirmResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.GDMoveConfirmResp.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.GDMoveConfirmResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.GDMoveConfirmResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDMoveConfirmResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resultRange: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hostHp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    duelHp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    hostCurrCard: jspb.Message.getFieldWithDefault(msg, 5, 0),
    duelCurrCard: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.GDMoveConfirmResp}
 */
proto.ULZProto.GDMoveConfirmResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.GDMoveConfirmResp;
  return proto.ULZProto.GDMoveConfirmResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.GDMoveConfirmResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.GDMoveConfirmResp}
 */
proto.ULZProto.GDMoveConfirmResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomKey(value);
      break;
    case 2:
      var value = /** @type {!proto.ULZProto.RangeType} */ (reader.readEnum());
      msg.setResultRange(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHostHp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuelHp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHostCurrCard(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuelCurrCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.GDMoveConfirmResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.GDMoveConfirmResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.GDMoveConfirmResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDMoveConfirmResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResultRange();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getHostHp();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDuelHp();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHostCurrCard();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getDuelCurrCard();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string room_key = 1;
 * @return {string}
 */
proto.ULZProto.GDMoveConfirmResp.prototype.getRoomKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ULZProto.GDMoveConfirmResp.prototype.setRoomKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RangeType result_range = 2;
 * @return {!proto.ULZProto.RangeType}
 */
proto.ULZProto.GDMoveConfirmResp.prototype.getResultRange = function() {
  return /** @type {!proto.ULZProto.RangeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ULZProto.RangeType} value */
proto.ULZProto.GDMoveConfirmResp.prototype.setResultRange = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 host_hp = 3;
 * @return {number}
 */
proto.ULZProto.GDMoveConfirmResp.prototype.getHostHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ULZProto.GDMoveConfirmResp.prototype.setHostHp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 duel_hp = 4;
 * @return {number}
 */
proto.ULZProto.GDMoveConfirmResp.prototype.getDuelHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ULZProto.GDMoveConfirmResp.prototype.setDuelHp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 host_curr_card = 5;
 * @return {number}
 */
proto.ULZProto.GDMoveConfirmResp.prototype.getHostCurrCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ULZProto.GDMoveConfirmResp.prototype.setHostCurrCard = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 duel_curr_card = 6;
 * @return {number}
 */
proto.ULZProto.GDMoveConfirmResp.prototype.getDuelCurrCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ULZProto.GDMoveConfirmResp.prototype.setDuelCurrCard = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.GDADConfirmReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ULZProto.GDADConfirmReq.repeatedFields_, null);
};
goog.inherits(proto.ULZProto.GDADConfirmReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.GDADConfirmReq.displayName = 'proto.ULZProto.GDADConfirmReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ULZProto.GDADConfirmReq.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.GDADConfirmReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.GDADConfirmReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.GDADConfirmReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDADConfirmReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    side: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentPhase: jspb.Message.getFieldWithDefault(msg, 3, 0),
    triggerSklList: jspb.Message.toObjectList(msg.getTriggerSklList(),
    Data_pb.SkillSet.toObject, includeInstance),
    updateCardList: jspb.Message.toObjectList(msg.getUpdateCardList(),
    Data_pb.EventCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.GDADConfirmReq}
 */
proto.ULZProto.GDADConfirmReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.GDADConfirmReq;
  return proto.ULZProto.GDADConfirmReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.GDADConfirmReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.GDADConfirmReq}
 */
proto.ULZProto.GDADConfirmReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomKey(value);
      break;
    case 2:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 3:
      var value = /** @type {!proto.ULZProto.EventHookPhase} */ (reader.readEnum());
      msg.setCurrentPhase(value);
      break;
    case 4:
      var value = new Data_pb.SkillSet;
      reader.readMessage(value,Data_pb.SkillSet.deserializeBinaryFromReader);
      msg.addTriggerSkl(value);
      break;
    case 5:
      var value = new Data_pb.EventCard;
      reader.readMessage(value,Data_pb.EventCard.deserializeBinaryFromReader);
      msg.addUpdateCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.GDADConfirmReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.GDADConfirmReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.GDADConfirmReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDADConfirmReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCurrentPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTriggerSklList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      Data_pb.SkillSet.serializeBinaryToWriter
    );
  }
  f = message.getUpdateCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      Data_pb.EventCard.serializeBinaryToWriter
    );
  }
};


/**
 * optional string room_key = 1;
 * @return {string}
 */
proto.ULZProto.GDADConfirmReq.prototype.getRoomKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ULZProto.GDADConfirmReq.prototype.setRoomKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PlayerSide side = 2;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.GDADConfirmReq.prototype.getSide = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.GDADConfirmReq.prototype.setSide = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional EventHookPhase current_phase = 3;
 * @return {!proto.ULZProto.EventHookPhase}
 */
proto.ULZProto.GDADConfirmReq.prototype.getCurrentPhase = function() {
  return /** @type {!proto.ULZProto.EventHookPhase} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ULZProto.EventHookPhase} value */
proto.ULZProto.GDADConfirmReq.prototype.setCurrentPhase = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated SkillSet trigger_skl = 4;
 * @return {!Array<!proto.ULZProto.SkillSet>}
 */
proto.ULZProto.GDADConfirmReq.prototype.getTriggerSklList = function() {
  return /** @type{!Array<!proto.ULZProto.SkillSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.SkillSet, 4));
};


/** @param {!Array<!proto.ULZProto.SkillSet>} value */
proto.ULZProto.GDADConfirmReq.prototype.setTriggerSklList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ULZProto.SkillSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.SkillSet}
 */
proto.ULZProto.GDADConfirmReq.prototype.addTriggerSkl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ULZProto.SkillSet, opt_index);
};


proto.ULZProto.GDADConfirmReq.prototype.clearTriggerSklList = function() {
  this.setTriggerSklList([]);
};


/**
 * repeated EventCard update_card = 5;
 * @return {!Array<!proto.ULZProto.EventCard>}
 */
proto.ULZProto.GDADConfirmReq.prototype.getUpdateCardList = function() {
  return /** @type{!Array<!proto.ULZProto.EventCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.EventCard, 5));
};


/** @param {!Array<!proto.ULZProto.EventCard>} value */
proto.ULZProto.GDADConfirmReq.prototype.setUpdateCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ULZProto.EventCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.EventCard}
 */
proto.ULZProto.GDADConfirmReq.prototype.addUpdateCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ULZProto.EventCard, opt_index);
};


proto.ULZProto.GDADConfirmReq.prototype.clearUpdateCardList = function() {
  this.setUpdateCardList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.GDADResultResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ULZProto.GDADResultResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.GDADResultResp.displayName = 'proto.ULZProto.GDADResultResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.GDADResultResp.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.GDADResultResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.GDADResultResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDADResultResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    side: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentPhase: jspb.Message.getFieldWithDefault(msg, 3, 0),
    point: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.GDADResultResp}
 */
proto.ULZProto.GDADResultResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.GDADResultResp;
  return proto.ULZProto.GDADResultResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.GDADResultResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.GDADResultResp}
 */
proto.ULZProto.GDADResultResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomKey(value);
      break;
    case 2:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 3:
      var value = /** @type {!proto.ULZProto.EventHookPhase} */ (reader.readEnum());
      msg.setCurrentPhase(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.GDADResultResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.GDADResultResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.GDADResultResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDADResultResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCurrentPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPoint();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string room_key = 1;
 * @return {string}
 */
proto.ULZProto.GDADResultResp.prototype.getRoomKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ULZProto.GDADResultResp.prototype.setRoomKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PlayerSide side = 2;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.GDADResultResp.prototype.getSide = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.GDADResultResp.prototype.setSide = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional EventHookPhase current_phase = 3;
 * @return {!proto.ULZProto.EventHookPhase}
 */
proto.ULZProto.GDADResultResp.prototype.getCurrentPhase = function() {
  return /** @type {!proto.ULZProto.EventHookPhase} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ULZProto.EventHookPhase} value */
proto.ULZProto.GDADResultResp.prototype.setCurrentPhase = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 point = 4;
 * @return {number}
 */
proto.ULZProto.GDADResultResp.prototype.getPoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ULZProto.GDADResultResp.prototype.setPoint = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.GDADDiceResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ULZProto.GDADDiceResult.repeatedFields_, null);
};
goog.inherits(proto.ULZProto.GDADDiceResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.GDADDiceResult.displayName = 'proto.ULZProto.GDADDiceResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ULZProto.GDADDiceResult.repeatedFields_ = [7,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.GDADDiceResult.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.GDADDiceResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.GDADDiceResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDADDiceResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    turns: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentPhase: jspb.Message.getFieldWithDefault(msg, 3, 0),
    phaseAb: jspb.Message.getFieldWithDefault(msg, 4, 0),
    atkSide: jspb.Message.getFieldWithDefault(msg, 5, 0),
    atkPoint: jspb.Message.getFieldWithDefault(msg, 6, 0),
    atkSkillIdList: jspb.Message.getRepeatedField(msg, 7),
    defSide: jspb.Message.getFieldWithDefault(msg, 8, 0),
    defPoint: jspb.Message.getFieldWithDefault(msg, 9, 0),
    defSkillIdList: jspb.Message.getRepeatedField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.GDADDiceResult}
 */
proto.ULZProto.GDADDiceResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.GDADDiceResult;
  return proto.ULZProto.GDADDiceResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.GDADDiceResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.GDADDiceResult}
 */
proto.ULZProto.GDADDiceResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTurns(value);
      break;
    case 3:
      var value = /** @type {!proto.ULZProto.EventHookPhase} */ (reader.readEnum());
      msg.setCurrentPhase(value);
      break;
    case 4:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setPhaseAb(value);
      break;
    case 5:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setAtkSide(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAtkPoint(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setAtkSkillIdList(value);
      break;
    case 8:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setDefSide(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefPoint(value);
      break;
    case 10:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setDefSkillIdList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.GDADDiceResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.GDADDiceResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.GDADDiceResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDADDiceResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTurns();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCurrentPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPhaseAb();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getAtkSide();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getAtkPoint();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAtkSkillIdList();
  if (f.length > 0) {
    writer.writePackedInt32(
      7,
      f
    );
  }
  f = message.getDefSide();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getDefPoint();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getDefSkillIdList();
  if (f.length > 0) {
    writer.writePackedInt32(
      10,
      f
    );
  }
};


/**
 * optional string room_key = 1;
 * @return {string}
 */
proto.ULZProto.GDADDiceResult.prototype.getRoomKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ULZProto.GDADDiceResult.prototype.setRoomKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 turns = 2;
 * @return {number}
 */
proto.ULZProto.GDADDiceResult.prototype.getTurns = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ULZProto.GDADDiceResult.prototype.setTurns = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional EventHookPhase current_phase = 3;
 * @return {!proto.ULZProto.EventHookPhase}
 */
proto.ULZProto.GDADDiceResult.prototype.getCurrentPhase = function() {
  return /** @type {!proto.ULZProto.EventHookPhase} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ULZProto.EventHookPhase} value */
proto.ULZProto.GDADDiceResult.prototype.setCurrentPhase = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional PlayerSide phase_ab = 4;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.GDADDiceResult.prototype.getPhaseAb = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.GDADDiceResult.prototype.setPhaseAb = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional PlayerSide atk_side = 5;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.GDADDiceResult.prototype.getAtkSide = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.GDADDiceResult.prototype.setAtkSide = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional int32 atk_point = 6;
 * @return {number}
 */
proto.ULZProto.GDADDiceResult.prototype.getAtkPoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ULZProto.GDADDiceResult.prototype.setAtkPoint = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated int32 atk_skill_id = 7;
 * @return {!Array<number>}
 */
proto.ULZProto.GDADDiceResult.prototype.getAtkSkillIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<number>} value */
proto.ULZProto.GDADDiceResult.prototype.setAtkSkillIdList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.ULZProto.GDADDiceResult.prototype.addAtkSkillId = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.ULZProto.GDADDiceResult.prototype.clearAtkSkillIdList = function() {
  this.setAtkSkillIdList([]);
};


/**
 * optional PlayerSide def_side = 8;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.GDADDiceResult.prototype.getDefSide = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.GDADDiceResult.prototype.setDefSide = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional int32 def_point = 9;
 * @return {number}
 */
proto.ULZProto.GDADDiceResult.prototype.getDefPoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.ULZProto.GDADDiceResult.prototype.setDefPoint = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated int32 def_skill_id = 10;
 * @return {!Array<number>}
 */
proto.ULZProto.GDADDiceResult.prototype.getDefSkillIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array<number>} value */
proto.ULZProto.GDADDiceResult.prototype.setDefSkillIdList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.ULZProto.GDADDiceResult.prototype.addDefSkillId = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.ULZProto.GDADDiceResult.prototype.clearDefSkillIdList = function() {
  this.setDefSkillIdList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.GDPhaseConfirmReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ULZProto.GDPhaseConfirmReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.GDPhaseConfirmReq.displayName = 'proto.ULZProto.GDPhaseConfirmReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.GDPhaseConfirmReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.GDPhaseConfirmReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.GDPhaseConfirmReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDPhaseConfirmReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    side: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentPhase: jspb.Message.getFieldWithDefault(msg, 3, 0),
    phaseHook: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.GDPhaseConfirmReq}
 */
proto.ULZProto.GDPhaseConfirmReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.GDPhaseConfirmReq;
  return proto.ULZProto.GDPhaseConfirmReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.GDPhaseConfirmReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.GDPhaseConfirmReq}
 */
proto.ULZProto.GDPhaseConfirmReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomKey(value);
      break;
    case 2:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 3:
      var value = /** @type {!proto.ULZProto.EventHookPhase} */ (reader.readEnum());
      msg.setCurrentPhase(value);
      break;
    case 4:
      var value = /** @type {!proto.ULZProto.EventHookType} */ (reader.readEnum());
      msg.setPhaseHook(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.GDPhaseConfirmReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.GDPhaseConfirmReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.GDPhaseConfirmReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDPhaseConfirmReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCurrentPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPhaseHook();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string room_key = 1;
 * @return {string}
 */
proto.ULZProto.GDPhaseConfirmReq.prototype.getRoomKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ULZProto.GDPhaseConfirmReq.prototype.setRoomKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PlayerSide side = 2;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.GDPhaseConfirmReq.prototype.getSide = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.GDPhaseConfirmReq.prototype.setSide = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional EventHookPhase current_phase = 3;
 * @return {!proto.ULZProto.EventHookPhase}
 */
proto.ULZProto.GDPhaseConfirmReq.prototype.getCurrentPhase = function() {
  return /** @type {!proto.ULZProto.EventHookPhase} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ULZProto.EventHookPhase} value */
proto.ULZProto.GDPhaseConfirmReq.prototype.setCurrentPhase = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional EventHookType phase_hook = 4;
 * @return {!proto.ULZProto.EventHookType}
 */
proto.ULZProto.GDPhaseConfirmReq.prototype.getPhaseHook = function() {
  return /** @type {!proto.ULZProto.EventHookType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.ULZProto.EventHookType} value */
proto.ULZProto.GDPhaseConfirmReq.prototype.setPhaseHook = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.GDPhaseConfirmResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ULZProto.GDPhaseConfirmResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.GDPhaseConfirmResp.displayName = 'proto.ULZProto.GDPhaseConfirmResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.GDPhaseConfirmResp.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.GDPhaseConfirmResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.GDPhaseConfirmResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDPhaseConfirmResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomKey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.GDPhaseConfirmResp}
 */
proto.ULZProto.GDPhaseConfirmResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.GDPhaseConfirmResp;
  return proto.ULZProto.GDPhaseConfirmResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.GDPhaseConfirmResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.GDPhaseConfirmResp}
 */
proto.ULZProto.GDPhaseConfirmResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.GDPhaseConfirmResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.GDPhaseConfirmResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.GDPhaseConfirmResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDPhaseConfirmResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string room_key = 1;
 * @return {string}
 */
proto.ULZProto.GDPhaseConfirmResp.prototype.getRoomKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ULZProto.GDPhaseConfirmResp.prototype.setRoomKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.GDChangeConfirmReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ULZProto.GDChangeConfirmReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.GDChangeConfirmReq.displayName = 'proto.ULZProto.GDChangeConfirmReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.GDChangeConfirmReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.GDChangeConfirmReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.GDChangeConfirmReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDChangeConfirmReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    side: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cardNum: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.GDChangeConfirmReq}
 */
proto.ULZProto.GDChangeConfirmReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.GDChangeConfirmReq;
  return proto.ULZProto.GDChangeConfirmReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.GDChangeConfirmReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.GDChangeConfirmReq}
 */
proto.ULZProto.GDChangeConfirmReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomKey(value);
      break;
    case 2:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCardNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.GDChangeConfirmReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.GDChangeConfirmReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.GDChangeConfirmReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GDChangeConfirmReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCardNum();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string room_key = 1;
 * @return {string}
 */
proto.ULZProto.GDChangeConfirmReq.prototype.getRoomKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ULZProto.GDChangeConfirmReq.prototype.setRoomKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PlayerSide side = 2;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.GDChangeConfirmReq.prototype.getSide = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.GDChangeConfirmReq.prototype.setSide = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 card_num = 3;
 * @return {number}
 */
proto.ULZProto.GDChangeConfirmReq.prototype.getCardNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ULZProto.GDChangeConfirmReq.prototype.setCardNum = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.ULZProto.CastCmd = {
  GET_EFFECT_RESULT: 0,
  GET_DRAW_PHASE_RESULT: 1,
  GET_MOVE_PHASE_RESULT: 2,
  GET_ATK_PHASE_RESULT: 3,
  GET_DEF_PHASE_RESULT: 4,
  GET_INSTANCE_CARD: 5,
  GET_GAMESET_RESULT: 6,
  INSTANCE_DAMAGE: 7,
  INSTANCE_STATUS_CHANGE: 8
};

goog.object.extend(exports, proto.ULZProto);
