// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scriptRunner.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("scriptRunner.proto", fileDescriptor_78386969dce3f3e2) }

var fileDescriptor_78386969dce3f3e2 = []byte{
	// 106 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x4e, 0x2e, 0xca,
	0x2c, 0x28, 0x09, 0x2a, 0xcd, 0xcb, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x08, 0xf5, 0x89, 0x0a, 0x00, 0xb1, 0xa4, 0x78, 0xd3, 0x13, 0x73, 0x53, 0x8b, 0x53, 0x4b, 0x20,
	0x12, 0x46, 0xce, 0x5c, 0x3c, 0xc1, 0x48, 0xca, 0x85, 0x8c, 0xb9, 0x38, 0x83, 0x4a, 0xf3, 0x5c,
	0xd3, 0xd2, 0x52, 0x93, 0x4b, 0x84, 0x04, 0xf5, 0x60, 0xda, 0xf4, 0xdc, 0x13, 0x73, 0x53, 0x83,
	0x53, 0x4b, 0xa4, 0x30, 0x85, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0x66, 0x19, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xa1, 0x57, 0x63, 0x1d, 0x7a, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScriptRunnerClient is the client API for ScriptRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScriptRunnerClient interface {
	RunEffect(ctx context.Context, in *GameSet, opts ...grpc.CallOption) (*GameSet, error)
}

type scriptRunnerClient struct {
	cc *grpc.ClientConn
}

func NewScriptRunnerClient(cc *grpc.ClientConn) ScriptRunnerClient {
	return &scriptRunnerClient{cc}
}

func (c *scriptRunnerClient) RunEffect(ctx context.Context, in *GameSet, opts ...grpc.CallOption) (*GameSet, error) {
	out := new(GameSet)
	err := c.cc.Invoke(ctx, "/ULZProto.ScriptRunner/RunEffect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScriptRunnerServer is the server API for ScriptRunner service.
type ScriptRunnerServer interface {
	RunEffect(context.Context, *GameSet) (*GameSet, error)
}

// UnimplementedScriptRunnerServer can be embedded to have forward compatible implementations.
type UnimplementedScriptRunnerServer struct {
}

func (*UnimplementedScriptRunnerServer) RunEffect(ctx context.Context, req *GameSet) (*GameSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunEffect not implemented")
}

func RegisterScriptRunnerServer(s *grpc.Server, srv ScriptRunnerServer) {
	s.RegisterService(&_ScriptRunner_serviceDesc, srv)
}

func _ScriptRunner_RunEffect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptRunnerServer).RunEffect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.ScriptRunner/RunEffect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptRunnerServer).RunEffect(ctx, req.(*GameSet))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScriptRunner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ULZProto.ScriptRunner",
	HandlerType: (*ScriptRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunEffect",
			Handler:    _ScriptRunner_RunEffect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scriptRunner.proto",
}
